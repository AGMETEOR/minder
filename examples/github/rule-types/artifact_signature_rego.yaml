---
version: v1
type: rule-type
name: artifact_signature_rego
context:
  provider: github
  group: Root Group
description: Verifies that a given artifact has a valid signature.
guidance: |
  Artifact signing allows a user to add a digital fingerprint to an artifact and verify its trust later.
  It allows the artifact user to verify the source and trust the container image.
  Mediator leverages sigstore(cosign) to verify an artifact has been signed.

  For more information, see
  https://docs.sigstore.dev/signing/signing_with_containers
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template that is used to render multiple parts
  # of the rule.
  in_entity: artifact
  # Defines the schema for parameters that will be passed to the rule
  param_schema:
    properties:
      name:
        type: string
        description: "The name of the artifact to check."
      tags:
        "type": array
        "items": {
          "type": "string"
        }
        description: "The tags of the artifact to check. Must be a subset of the tags the artifact has"
      type:
        "type": string
        "default": "container"
        "enum": ["container"]
        description: "The type of artifact to check. Currently only container is supported."
    required:
      - tags
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    properties:
      artifact_signature:
        type: "object"
        properties:
          is_signed:
            type: boolean
            description: "Set to true to enforce artifact being signed."
          is_verified:
            type: boolean
            description: "Set to true to enforce artifact signature being verified."
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: artifact
    # Currently no configuration
    artifact: {}
  # Defines the configuration for evaluating data ingested against the given policy
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package mediator
    
        default allow := false

        allow {
            version := input.ingested[_]
            not (version.Verification.is_signed == input.policy.is_signed)
            not (version.Verification.is_verified == input.policy.is_verified)
            not (version.Verification.is_bundle_verified == input.policy.is_bundle_verified)
        }
