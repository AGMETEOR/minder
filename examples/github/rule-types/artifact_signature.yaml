---
version: v1
type: rule-type
name: artifact_signature
context:
  provider: github
  group: Root Group
description: Verifies that a given artifact has a valid signature.
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template that is used to render multiple parts
  # of the rule.
  in_entity: artifact
  # Defines the schema for parameters that will be passed to the rule
  param_schema:
    properties:
      name:
        type: string
        description: "The name of the artifact to check."
      tags:
        "type": array
        "items": {
          "type": "string"
        }
        description: "The tags of the artifact to check. Must be a subset of the tags the artifact has"
      type:
        "type": string
        "default": "container"
        "enum": ["container"]
        description: "The type of artifact to check. Currently only container is supported."
    required:
      - name
      - tags
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    properties:
      artifact_signature:
        type: "object"
        properties:
          is_signed:
            type: boolean
            description: "Set to true to enforce artifact being signed."
          is_verified:
            type: boolean
            description: "Set to true to enforce artifact signature being verified."
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: artifact
    # Currently no configuration
    artifact: {}
  # Defines the configuration for evaluating data ingested against the given policy
  eval:
    type: jq
    jq:
      # Ingested points to the data retrieved in the `ingest` section
      - ingested:
          def: ".Verification.is_signed"
        # policy points to the policy itself.
        policy:
          def: ".is_signed"
      - ingested:
          def: ".Verification.is_verified"
        policy:
          def: ".is_verified"
      - ingested:
          def: ".Verification.is_bundle_verified"
        policy:
          def: ".is_bundle_verified"
