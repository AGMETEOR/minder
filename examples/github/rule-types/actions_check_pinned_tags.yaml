---
version: v1
type: rule-type
name: actions_check_pinned_tags
context:
  provider: github
  group: Root Group
description: Verifies that any actions use pinned tags
guidance: |
  Verifies that any actions use pinned tags
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template that is used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  # In this case there is no settings that need to be configured
  rule_schema: {}
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: git
    git:
      branch: main
  # Defines the configuration for evaluating data ingested against the given policy
  # This example uses the checks for that github actions are using pinned tags
  # for the uses directive, in the form of SHA-1 hash
  # For example, this wil fail:
  # uses: actions/checkout@v2
  # This will pass:
  # uses: actions/checkout@f3d2b746c498f2d3d1f2d3d1f2d3d1f2d3d1f2d3
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package mediator

        default allow := false

        allow {
          # List all workflows
          workflows := file.ls("./.github/workflows")

          # Read all workflows
          some w
          workflowstr := file.read(workflows[w])

          # Parse the YAML content
          workflow := yaml.unmarshal(workflowstr)

          # Iterate over all jobs and steps in the current workflow
          job_steps := workflow.jobs[_].steps

          # Ensure each step uses a SHA-1 hash
          s := job_steps[_]
          
          # Split the uses directive at '@'
          parts := split(s.uses, "@")

          # Check if the string after '@' is 40 characters long (SHA-1 hash length)
          count(parts[1]) == 40

          # All characters should be hexadecimal
          re_match(`^[a-fA-F0-9]+$`, parts[1])
        }