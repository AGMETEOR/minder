// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: profiles.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (  
    provider,
    project_id,
    remediate,
    name) VALUES ($1, $2, $3, $4) RETURNING id, name, provider, project_id, remediate, created_at, updated_at
`

type CreateProfileParams struct {
	Provider  string            `json:"provider"`
	ProjectID uuid.UUID         `json:"project_id"`
	Remediate NullRemediateType `json:"remediate"`
	Name      string            `json:"name"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Provider,
		arg.ProjectID,
		arg.Remediate,
		arg.Name,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Provider,
		&i.ProjectID,
		&i.Remediate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProfileForEntity = `-- name: CreateProfileForEntity :one
INSERT INTO entity_profiles (
    entity,
    profile_id,
    contextual_rules) VALUES ($1, $2, $3::jsonb) RETURNING id, entity, profile_id, contextual_rules, created_at, updated_at
`

type CreateProfileForEntityParams struct {
	Entity          Entities        `json:"entity"`
	ProfileID       uuid.UUID       `json:"profile_id"`
	ContextualRules json.RawMessage `json:"contextual_rules"`
}

func (q *Queries) CreateProfileForEntity(ctx context.Context, arg CreateProfileForEntityParams) (EntityProfile, error) {
	row := q.db.QueryRowContext(ctx, createProfileForEntity, arg.Entity, arg.ProfileID, arg.ContextualRules)
	var i EntityProfile
	err := row.Scan(
		&i.ID,
		&i.Entity,
		&i.ProfileID,
		&i.ContextualRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT id, name, provider, project_id, remediate, created_at, updated_at FROM profiles WHERE id = $1
`

func (q *Queries) GetProfileByID(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Provider,
		&i.ProjectID,
		&i.Remediate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByProjectAndID = `-- name: GetProfileByProjectAndID :many
SELECT profiles.id, name, provider, project_id, remediate, profiles.created_at, profiles.updated_at, entity_profiles.id, entity, profile_id, contextual_rules, entity_profiles.created_at, entity_profiles.updated_at FROM profiles JOIN entity_profiles ON profiles.id = entity_profiles.profile_id
WHERE profiles.project_id = $1 AND profiles.id = $2
`

type GetProfileByProjectAndIDParams struct {
	ProjectID uuid.UUID `json:"project_id"`
	ID        uuid.UUID `json:"id"`
}

type GetProfileByProjectAndIDRow struct {
	ID              uuid.UUID         `json:"id"`
	Name            string            `json:"name"`
	Provider        string            `json:"provider"`
	ProjectID       uuid.UUID         `json:"project_id"`
	Remediate       NullRemediateType `json:"remediate"`
	CreatedAt       time.Time         `json:"created_at"`
	UpdatedAt       time.Time         `json:"updated_at"`
	ID_2            uuid.UUID         `json:"id_2"`
	Entity          Entities          `json:"entity"`
	ProfileID       uuid.UUID         `json:"profile_id"`
	ContextualRules json.RawMessage   `json:"contextual_rules"`
	CreatedAt_2     time.Time         `json:"created_at_2"`
	UpdatedAt_2     time.Time         `json:"updated_at_2"`
}

func (q *Queries) GetProfileByProjectAndID(ctx context.Context, arg GetProfileByProjectAndIDParams) ([]GetProfileByProjectAndIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileByProjectAndID, arg.ProjectID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProfileByProjectAndIDRow{}
	for rows.Next() {
		var i GetProfileByProjectAndIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Provider,
			&i.ProjectID,
			&i.Remediate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Entity,
			&i.ProfileID,
			&i.ContextualRules,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByProjectAndName = `-- name: GetProfileByProjectAndName :many
SELECT profiles.id, name, provider, project_id, remediate, profiles.created_at, profiles.updated_at, entity_profiles.id, entity, profile_id, contextual_rules, entity_profiles.created_at, entity_profiles.updated_at FROM profiles JOIN entity_profiles ON profiles.id = entity_profiles.profile_id
WHERE profiles.project_id = $1 AND profiles.name = $2
`

type GetProfileByProjectAndNameParams struct {
	ProjectID uuid.UUID `json:"project_id"`
	Name      string    `json:"name"`
}

type GetProfileByProjectAndNameRow struct {
	ID              uuid.UUID         `json:"id"`
	Name            string            `json:"name"`
	Provider        string            `json:"provider"`
	ProjectID       uuid.UUID         `json:"project_id"`
	Remediate       NullRemediateType `json:"remediate"`
	CreatedAt       time.Time         `json:"created_at"`
	UpdatedAt       time.Time         `json:"updated_at"`
	ID_2            uuid.UUID         `json:"id_2"`
	Entity          Entities          `json:"entity"`
	ProfileID       uuid.UUID         `json:"profile_id"`
	ContextualRules json.RawMessage   `json:"contextual_rules"`
	CreatedAt_2     time.Time         `json:"created_at_2"`
	UpdatedAt_2     time.Time         `json:"updated_at_2"`
}

func (q *Queries) GetProfileByProjectAndName(ctx context.Context, arg GetProfileByProjectAndNameParams) ([]GetProfileByProjectAndNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileByProjectAndName, arg.ProjectID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProfileByProjectAndNameRow{}
	for rows.Next() {
		var i GetProfileByProjectAndNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Provider,
			&i.ProjectID,
			&i.Remediate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Entity,
			&i.ProfileID,
			&i.ContextualRules,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfilesByProjectID = `-- name: ListProfilesByProjectID :many
SELECT profiles.id, name, provider, project_id, remediate, profiles.created_at, profiles.updated_at, entity_profiles.id, entity, profile_id, contextual_rules, entity_profiles.created_at, entity_profiles.updated_at FROM profiles JOIN entity_profiles ON profiles.id = entity_profiles.profile_id
WHERE profiles.project_id = $1
`

type ListProfilesByProjectIDRow struct {
	ID              uuid.UUID         `json:"id"`
	Name            string            `json:"name"`
	Provider        string            `json:"provider"`
	ProjectID       uuid.UUID         `json:"project_id"`
	Remediate       NullRemediateType `json:"remediate"`
	CreatedAt       time.Time         `json:"created_at"`
	UpdatedAt       time.Time         `json:"updated_at"`
	ID_2            uuid.UUID         `json:"id_2"`
	Entity          Entities          `json:"entity"`
	ProfileID       uuid.UUID         `json:"profile_id"`
	ContextualRules json.RawMessage   `json:"contextual_rules"`
	CreatedAt_2     time.Time         `json:"created_at_2"`
	UpdatedAt_2     time.Time         `json:"updated_at_2"`
}

func (q *Queries) ListProfilesByProjectID(ctx context.Context, projectID uuid.UUID) ([]ListProfilesByProjectIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfilesByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfilesByProjectIDRow{}
	for rows.Next() {
		var i ListProfilesByProjectIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Provider,
			&i.ProjectID,
			&i.Remediate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Entity,
			&i.ProfileID,
			&i.ContextualRules,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
