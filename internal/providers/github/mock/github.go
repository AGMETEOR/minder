// Code generated by MockGen. DO NOT EDIT.
// Source: internal/providers/github/github.go

// Package mockgh is a generated GoMock package.
package mockgh

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v53/github"
	github0 "github.com/stacklok/mediator/internal/providers/github"
)

// MockRestAPI is a mock of RestAPI interface.
type MockRestAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRestAPIMockRecorder
}

// MockRestAPIMockRecorder is the mock recorder for MockRestAPI.
type MockRestAPIMockRecorder struct {
	mock *MockRestAPI
}

// NewMockRestAPI creates a new mock instance.
func NewMockRestAPI(ctrl *gomock.Controller) *MockRestAPI {
	mock := &MockRestAPI{ctrl: ctrl}
	mock.recorder = &MockRestAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestAPI) EXPECT() *MockRestAPIMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockRestAPI) CreateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestReviewRequest) (*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockRestAPIMockRecorder) CreateReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockRestAPI)(nil).CreateReview), arg0, arg1, arg2, arg3, arg4)
}

// DismissReview mocks base method.
func (m *MockRestAPI) DismissReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DismissReview indicates an expected call of DismissReview.
func (mr *MockRestAPIMockRecorder) DismissReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissReview", reflect.TypeOf((*MockRestAPI)(nil).DismissReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Do mocks base method.
func (m *MockRestAPI) Do(ctx context.Context, req *http.Request, v any) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req, v)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRestAPIMockRecorder) Do(ctx, req, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRestAPI)(nil).Do), ctx, req, v)
}

// GetAuthenticatedUser mocks base method.
func (m *MockRestAPI) GetAuthenticatedUser(arg0 context.Context) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", arg0)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser.
func (mr *MockRestAPIMockRecorder) GetAuthenticatedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockRestAPI)(nil).GetAuthenticatedUser), arg0)
}

// GetBranchProtection mocks base method.
func (m *MockRestAPI) GetBranchProtection(arg0 context.Context, arg1, arg2, arg3 string) (*github.Protection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockRestAPIMockRecorder) GetBranchProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockRestAPI)(nil).GetBranchProtection), arg0, arg1, arg2, arg3)
}

// GetOwner mocks base method.
func (m *MockRestAPI) GetOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockRestAPIMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockRestAPI)(nil).GetOwner))
}

// GetPackageByName mocks base method.
func (m *MockRestAPI) GetPackageByName(arg0 context.Context, arg1 bool, arg2, arg3, arg4 string) (*github.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageByName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageByName indicates an expected call of GetPackageByName.
func (mr *MockRestAPIMockRecorder) GetPackageByName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageByName", reflect.TypeOf((*MockRestAPI)(nil).GetPackageByName), arg0, arg1, arg2, arg3, arg4)
}

// GetPackageVersionById mocks base method.
func (m *MockRestAPI) GetPackageVersionById(arg0 context.Context, arg1 bool, arg2, arg3, arg4 string, arg5 int64) (*github.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionById", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionById indicates an expected call of GetPackageVersionById.
func (mr *MockRestAPIMockRecorder) GetPackageVersionById(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionById", reflect.TypeOf((*MockRestAPI)(nil).GetPackageVersionById), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPackageVersionByTag mocks base method.
func (m *MockRestAPI) GetPackageVersionByTag(arg0 context.Context, arg1 bool, arg2, arg3, arg4, arg5 string) (*github.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionByTag", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionByTag indicates an expected call of GetPackageVersionByTag.
func (mr *MockRestAPIMockRecorder) GetPackageVersionByTag(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionByTag", reflect.TypeOf((*MockRestAPI)(nil).GetPackageVersionByTag), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPackageVersions mocks base method.
func (m *MockRestAPI) GetPackageVersions(arg0 context.Context, arg1 bool, arg2, arg3, arg4 string) ([]*github.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersions indicates an expected call of GetPackageVersions.
func (mr *MockRestAPIMockRecorder) GetPackageVersions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersions", reflect.TypeOf((*MockRestAPI)(nil).GetPackageVersions), arg0, arg1, arg2, arg3, arg4)
}

// GetPullRequest mocks base method.
func (m *MockRestAPI) GetPullRequest(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockRestAPIMockRecorder) GetPullRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockRestAPI)(nil).GetPullRequest), arg0, arg1, arg2, arg3)
}

// GetRepository mocks base method.
func (m *MockRestAPI) GetRepository(arg0 context.Context, arg1, arg2 string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRestAPIMockRecorder) GetRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRestAPI)(nil).GetRepository), arg0, arg1, arg2)
}

// GetToken mocks base method.
func (m *MockRestAPI) GetToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockRestAPIMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockRestAPI)(nil).GetToken))
}

// ListAllPackages mocks base method.
func (m *MockRestAPI) ListAllPackages(arg0 context.Context, arg1 bool, arg2, arg3 string, arg4, arg5 int) (github0.PackageListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllPackages", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(github0.PackageListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPackages indicates an expected call of ListAllPackages.
func (mr *MockRestAPIMockRecorder) ListAllPackages(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPackages", reflect.TypeOf((*MockRestAPI)(nil).ListAllPackages), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListAllRepositories mocks base method.
func (m *MockRestAPI) ListAllRepositories(arg0 context.Context, arg1 bool, arg2 string) (github0.RepositoryListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRepositories", arg0, arg1, arg2)
	ret0, _ := ret[0].(github0.RepositoryListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRepositories indicates an expected call of ListAllRepositories.
func (mr *MockRestAPIMockRecorder) ListAllRepositories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRepositories", reflect.TypeOf((*MockRestAPI)(nil).ListAllRepositories), arg0, arg1, arg2)
}

// ListFiles mocks base method.
func (m *MockRestAPI) ListFiles(arg0 context.Context, arg1, arg2 string, arg3, arg4, arg5 int) ([]*github.CommitFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockRestAPIMockRecorder) ListFiles(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockRestAPI)(nil).ListFiles), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListPackagesByRepository mocks base method.
func (m *MockRestAPI) ListPackagesByRepository(arg0 context.Context, arg1 bool, arg2, arg3 string, arg4 int64, arg5, arg6 int) (github0.PackageListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesByRepository", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(github0.PackageListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesByRepository indicates an expected call of ListPackagesByRepository.
func (mr *MockRestAPIMockRecorder) ListPackagesByRepository(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesByRepository", reflect.TypeOf((*MockRestAPI)(nil).ListPackagesByRepository), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListReviews mocks base method.
func (m *MockRestAPI) ListReviews(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockRestAPIMockRecorder) ListReviews(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockRestAPI)(nil).ListReviews), arg0, arg1, arg2, arg3, arg4)
}

// NewRequest mocks base method.
func (m *MockRestAPI) NewRequest(method, urlStr string, body any, opts ...github.RequestOption) (*http.Request, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{method, urlStr, body}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRequest", varargs...)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockRestAPIMockRecorder) NewRequest(method, urlStr, body interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method, urlStr, body}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockRestAPI)(nil).NewRequest), varargs...)
}

// SetCommitStatus mocks base method.
func (m *MockRestAPI) SetCommitStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepoStatus) (*github.RepoStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommitStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepoStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockRestAPIMockRecorder) SetCommitStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockRestAPI)(nil).SetCommitStatus), arg0, arg1, arg2, arg3, arg4)
}

// MockGraphQLAPI is a mock of GraphQLAPI interface.
type MockGraphQLAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLAPIMockRecorder
}

// MockGraphQLAPIMockRecorder is the mock recorder for MockGraphQLAPI.
type MockGraphQLAPIMockRecorder struct {
	mock *MockGraphQLAPI
}

// NewMockGraphQLAPI creates a new mock instance.
func NewMockGraphQLAPI(ctrl *gomock.Controller) *MockGraphQLAPI {
	mock := &MockGraphQLAPI{ctrl: ctrl}
	mock.recorder = &MockGraphQLAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLAPI) EXPECT() *MockGraphQLAPIMockRecorder {
	return m.recorder
}

// RunQuery mocks base method.
func (m *MockGraphQLAPI) RunQuery(ctx context.Context, query interface{}, variables map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", ctx, query, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockGraphQLAPIMockRecorder) RunQuery(ctx, query, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockGraphQLAPI)(nil).RunQuery), ctx, query, variables)
}
