// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: projects.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name,
    parent_id,
    metadata
) VALUES (
    $1, $2, $3::jsonb
) RETURNING id, name, metadata, parent_id, created_at, updated_at
`

type CreateProjectParams struct {
	Name     string          `json:"name"`
	ParentID uuid.NullUUID   `json:"parent_id"`
	Metadata json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.ParentID, arg.Metadata)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :many
WITH RECURSIVE get_children AS (
    SELECT id, parent_id FROM projects
    WHERE projects.id = $1 AND projects.parent_id IS NOT NULL

    UNION

    SELECT p.id, d.parent_id FROM projects d
    INNER JOIN get_children gc ON p.parent_id = gc.id
)
DELETE FROM projects
WHERE id IN (SELECT id FROM get_children)
RETURNING id, name, metadata, created_at, updated_at, parent_id
`

type DeleteProjectRow struct {
	ID        uuid.UUID       `json:"id"`
	Name      string          `json:"name"`
	Metadata  json.RawMessage `json:"metadata"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
	ParentID  uuid.NullUUID   `json:"parent_id"`
}

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) ([]DeleteProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, deleteProject, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeleteProjectRow{}
	for rows.Next() {
		var i DeleteProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChildren = `-- name: GetChildren :many
WITH RECURSIVE get_children AS (
    SELECT id, parent_id, created_at FROM projects 
    WHERE projects.id = $1

    UNION

    (
        SELECT p.id, p.parent_id, p.created_at FROM projects p
        INNER JOIN get_children gc ON p.parent_id = gc.id
        ORDER BY created_at ASC
    )
)
SELECT id FROM get_children
`

func (q *Queries) GetChildren(ctx context.Context, id uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getChildren, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParents = `-- name: GetParents :many
WITH RECURSIVE get_parents AS (
    SELECT id, parent_id, created_at FROM projects 
    WHERE projects.id = $1

    UNION

    (
        SELECT p.id, p.parent_id, p.created_at FROM projects p
        INNER JOIN get_parents gp ON p.id = gp.parent_id
        ORDER BY created_at ASC
    )
)
SELECT id FROM get_parents
`

func (q *Queries) GetParents(ctx context.Context, id uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getParents, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentsUntil = `-- name: GetParentsUntil :many
WITH RECURSIVE get_parents_until AS (
    SELECT id, parent_id, created_at FROM projects 
    WHERE projects.id = $1

    UNION

    (
        SELECT p.id, p.parent_id, p.created_at FROM projects p
        INNER JOIN get_parents_until gpu ON p.id = gpu.parent_id
        WHERE p.id != $2
        ORDER BY created_at ASC
    )
)
SELECT id FROM get_parents_until
`

type GetParentsUntilParams struct {
	ID   uuid.UUID `json:"id"`
	ID_2 uuid.UUID `json:"id_2"`
}

func (q *Queries) GetParentsUntil(ctx context.Context, arg GetParentsUntilParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getParentsUntil, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, name, parent_id, metadata, created_at, updated_at FROM projects
WHERE id = $1
`

type GetProjectByIDRow struct {
	ID        uuid.UUID       `json:"id"`
	Name      string          `json:"name"`
	ParentID  uuid.NullUUID   `json:"parent_id"`
	Metadata  json.RawMessage `json:"metadata"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (GetProjectByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i GetProjectByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
